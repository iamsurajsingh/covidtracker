{"version":3,"sources":["Components/InfoBox/InfoBox.js","Components/Table/Table.js","Utility.js","Components/LineGraph/Linegraph.js","Components/Maps/Maps.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","className","onClick","CardContent","Typography","color","Table","countries","map","country","numeral","format","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","console","log","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","fill","Maps","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","setMap","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso3","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","i","key","e","todayCases","todayRecovered","todayDeaths","Linegraph","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24eda6a6.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\nimport React from 'react';\nimport './infoBox.css';\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n    return (\n\n        <Card className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"} `}\n         onClick={props.onClick}\n         >\n            <CardContent className=\"infoBox__CardContent\">\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                <h2 className=\"infoBoxCard__cases\">{cases}</h2>\n\n                <Typography className=\"infoBoxCard__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n\n    )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport \"./table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0.0aa\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 500,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 300,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 400,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType) =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport \"./linegraph.css\";\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 1,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: \n        [\n            {\n                type: \"time\",\n                time: \n                {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: \n        [\n            {\n                gridLines: {\n                    display: false,\n                    \n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            \n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            \n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n        console.log(lastDataPoint);\n    }\n    \n    return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    console.log(data);\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                    \n                });\n        };\n\n        fetchData();\n    }, [casesType]);\n\n    \n\n    return (\n        <div className = 'linegraph'>\n            {data?.length > 0 && (\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                label: `New Cases`,\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                                borderColor: \"#CC1034\",\n                                fill: true,\n                                data: data,\n                                \n                            },\n                        ],\n                    }}\n                    options={options}\n                    className = \"lineStyle\"\n                />\n            )}\n        </div>\n    );\n}\n\nexport default LineGraph;","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./maps.css\";\nimport { showDataOnMap } from \"../../Utility\";\n\n\nfunction Maps({ countries, casesType, center, zoom}) {\n  return (\n    <div className=\"maps\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {console.log(\"casesType::\", casesType)}\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Maps;","import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport InfoBox from './Components/InfoBox/InfoBox';\nimport Table from './Components/Table/Table';\nimport { sortData, prettyPrintStat } from './Utility';\nimport { Card, CardContent, FormControl, Select, MenuItem } from '@material-ui/core';\nimport Linegraph from './Components/LineGraph/Linegraph';\nimport Maps from './Components/Maps/Maps';\nimport \"../node_modules/leaflet/dist/leaflet.css\";\nimport numeral from 'numeral';\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [map, setMap] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      });\n\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          console.log(data);\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso3,\n            }\n          ));\n\n          const sortedData = sortData(data);\n\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    //console.log(countryCode);\n\n    const url = countryCode === \"worldwide\" ?\n      \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n\n        setCountry(countryCode);\n        setCountryInfo(data);\n        // setMap([data.countryInfo.lat, data.countryInfo.long]);\n\n        if (countryCode === \"worldwide\") {\n\n          setMap({ lat: 34.80746, lng: -40.4796 });\n          setMapZoom(3);\n\n        }\n\n        else {\n          setMap([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        }\n\n      });\n\n  };\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"app_left\">\n        {/* Header */}\n        <div className=\"app_header\">\n          <h2>Covid-19 Tracker</h2>\n          <FormControl className=\"country_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {countries.map((country, i) => (\n                <MenuItem key={i} value={country.value}>{country.name}</MenuItem>\n              ))};\n\n\n            </Select>\n          </FormControl>\n        </div>\n        {/* Cases Cards */}\n        <div className=\"app_stats\">\n          <InfoBox title=\"Cases\"\n            active = {casesType === 'cases'}\n            isRed\n            onClick={(e) => setCasesType(\"cases\")}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox title=\"Recovered\"\n            onClick={(e) => setCasesType(\"recovered\")}\n            active = {casesType === 'recovered'}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total = {numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox title=\"Deaths\"\n            onClick={(e) => setCasesType(\"deaths\")}\n            active = {casesType === 'deaths'}\n            isRed\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n\n        {/* Map */}\n\n        <Maps countries={mapCountries} casesType={casesType} center={map} zoom={mapZoom} />\n      </div>\n\n      <div className=\"app_right\">\n        <div className=\"card1\">\n          <Card>\n            <CardContent>\n              <h3> Total Cases by Country</h3>\n              <Table countries={tableData} />\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"card2\">\n          <Card>\n            <CardContent>\n              <h3> Worldwide New {casesType}</h3>\n              <Linegraph casesType={casesType} />\n            </CardContent>\n          </Card>\n        </div>\n\n\n        {/* Graph */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}